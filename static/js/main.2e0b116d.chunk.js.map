{"version":3,"sources":["components/Home/Home.js","utils/classNames.js","components/About/About.js","App.js","serviceWorker.js","index.js"],"names":["Home","id","className","src","alt","takeZeroeth","R","takeFirst","takeWithFirstTrue","getTruthfulKeys","classNames","args","classes","concat","arguments","reduce","acc","val","push","getClasses","join","About","navRef","React","createRef","ref","onScroll","console","log","e","target","style","display","flexBasis","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2e0b116d.chunk.js","sourcesContent":["import React from 'react';\nimport './Home.scss';\n\nconst Home = () =>{\n    return(\n        <div id='home'  className='headContainer'>\n            <div className='headerWrapper'>\n                <div className='headFLine'>Hello, I'm <span>Himanshu Kumar.</span></div>\n                <div className='headSLine'>I'm a full-stack web developer.</div> \n                <div className='viewWork'> View my work <img src='./icons/right-arrow.svg' alt='right-arrow'></img></div>\n             </div>\n        </div>\n    )\n}\n\nexport default Home;","import * as R from \"ramda\";\n\n\nlet takeZeroeth = R.nth(0);\nlet takeFirst = R.nth(1);\nlet takeWithFirstTrue = R.filter(takeFirst);\nconst getTruthfulKeys = R.compose(\n  R.map(takeZeroeth),\n  takeWithFirstTrue,\n  R.toPairs\n);\n/**\n * It accepts strings, objects as arg and returns class string\n * e.g\n * 1. classNames('c1', 'c2', 'c3') => 'c1 c2 c3'\n * 2. classNames('c1', {c2: true, c3: false}) => 'c1 c2'\n * @returns {string}\n */\n\n// type IArgType = string | ({ [key: string]: boolean });\nconst classNames = function (...args) {\n  const classes = []\n    .concat(...arguments)\n    .reduce((acc, val) => {\n      if (typeof val === \"string\") acc.push(val);\n      else if (typeof val === \"object\") {\n        const getClasses = R.compose(\n          R.concat(acc),\n          getTruthfulKeys\n        );\n        return getClasses(val);\n      }\n      return acc;\n    }, []);\n  return classes.join(\" \");\n};\n\nexport default classNames;\n","import React from 'react';\nimport classNames from '../../utils/classNames';\n\nimport './About.scss';\n\nconst About  = () =>{\n    const navRef = React.createRef();\n    const handleScroll = (e) => {\n        // let scrollTop = navRef.current.scrollTop;\n        // console.log(scrollTop);\n        console.log(e.target);\n        console.log('himanshu');\n        // let navbar = document.getElementsByClassName('.navbar');\n        // let sticky  = navbar.pageYOffset;\n        // console.log(sticky,\"himanshu\", window.pageYOffset);\n        // if (window.pageYOffset >= sticky) {\n        //     navbar.classList.add(\".sticky\")\n        //   } else {\n        //     // navbar.classList.remove(\".sticky\");\n        //   }\n    }\n    const calc = (num, per) =>{\n        return (num/100)*per;\n    }\n    return (\n        <div className='aboutContainer'>\n            <div className={classNames('navbar',{'sticky':false})} ref={navRef} onScroll={() => handleScroll()}>\n                <div className='navBarContainer'>\n                    <div className={classNames('home',{'active':true})}>Home</div>\n                    <div className='about'>About</div>\n                    <div className='experience'>Experience</div>\n                    <div className='education'>Education</div>\n                    <div className='resume'>Resume</div>\n                    <div className='contact'>Contact</div>\n                </div>\n            </div>\n            <div id='about' className='aboutbody'>\n                <h1 className='aboutTitle'>About</h1>\n                <div className='skills'>\n                    <div className='fast'>\n                        <div>Fast</div>\n                        <div>Fast load times and lag free interaction, my highest priority.</div>\n                    </div>\n                    <div className='responsive'>\n                        <div>Responsive</div>\n                        <div>My layouts will work on any device, big or small.</div>\n                    </div>\n                    <div className='intuitive'>\n                        <div>Intuitive</div>\n                        <div>Strong preference for easy to use, intuitive UX/UI.</div>\n                    </div>\n                    <div className='dynamic'>\n                        <div>Dynamic</div>\n                        <div>Websites don't have to be static, I love making pages come to life.</div>\n                    </div>\n                </div>\n            </div>\n            <div className='aboutskills'>\n                <img className='profilePic' src='./icons/pp.jpg' alt='profilePic'></img>\n                <ul className='skillset'>\n                    <li>\n                        <div>css</div>\n                        <div style={{display:\"flex\",flexBasis:\"45%\"}}></div>\n                        <div className='percentage'>60%</div>\n                    </li>\n                    <li>\n                        <div>Html</div>\n                        <div style={{display:\"flex\",flexBasis:\"52.5%\"}}></div>\n                        <div className='percentage'>70%</div>\n                    </li>\n                    <li>\n                        <div>React</div>\n                        <div style={{display:\"flex\",flexBasis:\"60%\"}}></div>\n                        <div className='percentage'>80%</div>\n                    </li>\n                    <li>\n                        <div>Javascript</div>\n                        <div style={{display:\"flex\",flexBasis:\"60%\"}}></div>\n                        <div className='percentage'>80%</div>    \n                    </li>\n                    <li>\n                        <div>Nodejs</div>\n                        <div style={{display:\"flex\",flexBasis:\"37.5%\"}}></div>\n                        <div className='percentage'>50%</div>    \n                    </li>\n                    <li>\n                        <div>Data structures</div>\n                        <div style={{display:\"flex\",flexBasis:\"67.5%\"}}></div>\n                        <div className='percentage'>90%</div>\n                    </li>\n                    <li>\n                        <div>Algorithms</div>\n                        <div style={{display:\"flex\",flexBasis:\"63.75%\"}}></div>\n                        <div className='percentage'>85%</div>\n                    </li>\n                    <li>\n                        <div>C++</div>\n                        <div style={{display:\"flex\",flexBasis:\"67.5%\"}}></div>\n                        <div className='percentage'>90%</div>\n                    </li>\n                    <li>\n                        <div>c</div>\n                        <div style={{display:\"flex\",flexBasis:\"67.5%\"}}></div>\n                        <div className='percentage'>90%</div>\n                    </li>\n                    <li>\n                        <div>UI design</div>\n                        <div style={{display:\"flex\",flexBasis:\"52.5%\"}}></div>\n                        <div className='percentage' >70%</div>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    )\n}\nexport default About;","import React from 'react';\nimport './App.css';\nimport Home from './components/Home/Home';\nimport About from './components/About/About';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home/>\n      <About/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}